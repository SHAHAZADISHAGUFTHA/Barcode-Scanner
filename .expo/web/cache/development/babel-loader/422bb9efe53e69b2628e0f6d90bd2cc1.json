{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Syed Ali\\\\Downloads\\\\BarCodeScanner-master\\\\node_modules\\\\expo-barcode-scanner\\\\build\\\\BarCodeScanner.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { UnavailabilityError } from '@unimodules/core';\nimport { PermissionStatus } from 'unimodules-permissions-interface';\nimport mapValues from 'lodash/mapValues';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport ExpoBarCodeScannerModule from \"./ExpoBarCodeScannerModule\";\nimport ExpoBarCodeScannerView from \"./ExpoBarCodeScannerView\";\nvar BarCodeType = ExpoBarCodeScannerModule.BarCodeType,\n    Type = ExpoBarCodeScannerModule.Type;\nvar EVENT_THROTTLE_MS = 500;\nexport { PermissionStatus };\nexport var BarCodeScanner = function (_React$Component) {\n  _inherits(BarCodeScanner, _React$Component);\n\n  function BarCodeScanner() {\n    var _this;\n\n    _classCallCheck(this, BarCodeScanner);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BarCodeScanner).apply(this, arguments));\n    _this.lastEvents = {};\n    _this.lastEventsTimes = {};\n\n    _this.onObjectDetected = function (callback) {\n      return function (_ref) {\n        var nativeEvent = _ref.nativeEvent;\n        var type = nativeEvent.type;\n\n        if (_this.lastEvents[type] && _this.lastEventsTimes[type] && JSON.stringify(nativeEvent) === _this.lastEvents[type] && Date.now() - _this.lastEventsTimes[type] < EVENT_THROTTLE_MS) {\n          return;\n        }\n\n        if (callback) {\n          callback(nativeEvent);\n          _this.lastEventsTimes[type] = new Date();\n          _this.lastEvents[type] = JSON.stringify(nativeEvent);\n        }\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(BarCodeScanner, [{\n    key: \"render\",\n    value: function render() {\n      var nativeProps = this.convertNativeProps(this.props);\n      var onBarCodeScanned = this.props.onBarCodeScanned;\n      return React.createElement(ExpoBarCodeScannerView, _extends({}, nativeProps, {\n        onBarCodeScanned: this.onObjectDetected(onBarCodeScanned),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        }\n      }));\n    }\n  }, {\n    key: \"convertNativeProps\",\n    value: function convertNativeProps(props) {\n      var newProps = mapValues(props, this.convertProp);\n      return newProps;\n    }\n  }, {\n    key: \"convertProp\",\n    value: function convertProp(value, key) {\n      if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n        return BarCodeScanner.ConversionTables[key][value];\n      }\n\n      return value;\n    }\n  }], [{\n    key: \"getPermissionsAsync\",\n    value: function getPermissionsAsync() {\n      return _regeneratorRuntime.async(function getPermissionsAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", ExpoBarCodeScannerModule.getPermissionsAsync());\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"requestPermissionsAsync\",\n    value: function requestPermissionsAsync() {\n      return _regeneratorRuntime.async(function requestPermissionsAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", ExpoBarCodeScannerModule.requestPermissionsAsync());\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"scanFromURLAsync\",\n    value: function scanFromURLAsync(url) {\n      var barCodeTypes,\n          _args3 = arguments;\n      return _regeneratorRuntime.async(function scanFromURLAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              barCodeTypes = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : Object.values(BarCodeType);\n\n              if (ExpoBarCodeScannerModule.scanFromURLAsync) {\n                _context3.next = 3;\n                break;\n              }\n\n              throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n\n            case 3:\n              if (!(Array.isArray(barCodeTypes) && !barCodeTypes.length)) {\n                _context3.next = 5;\n                break;\n              }\n\n              throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n\n            case 5:\n              if (!(Platform.OS === 'ios')) {\n                _context3.next = 11;\n                break;\n              }\n\n              if (!(Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr))) {\n                _context3.next = 8;\n                break;\n              }\n\n              throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n\n            case 8:\n              _context3.next = 10;\n              return _regeneratorRuntime.awrap(ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]));\n\n            case 10:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 11:\n              _context3.next = 13;\n              return _regeneratorRuntime.awrap(ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes));\n\n            case 13:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return BarCodeScanner;\n}(React.Component);\nBarCodeScanner.Constants = {\n  BarCodeType: BarCodeType,\n  Type: Type\n};\nBarCodeScanner.ConversionTables = {\n  type: Type\n};\nBarCodeScanner.propTypes = _objectSpread({}, ViewPropTypes, {\n  onBarCodeScanned: PropTypes.func,\n  barCodeTypes: PropTypes.array,\n  type: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n});\nBarCodeScanner.defaultProps = {\n  type: Type.back,\n  barCodeTypes: Object.values(BarCodeType)\n};\nvar Constants = BarCodeScanner.Constants,\n    getPermissionsAsync = BarCodeScanner.getPermissionsAsync,\n    requestPermissionsAsync = BarCodeScanner.requestPermissionsAsync;\nexport { Constants, getPermissionsAsync, requestPermissionsAsync };","map":{"version":3,"sources":["../src/BarCodeScanner.tsx"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { PermissionResponse, PermissionStatus } from 'unimodules-permissions-interface';\nimport mapValues from 'lodash/mapValues';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Platform, ViewProps, ViewPropTypes } from 'react-native';\n\nimport ExpoBarCodeScannerModule from './ExpoBarCodeScannerModule';\nimport ExpoBarCodeScannerView from './ExpoBarCodeScannerView';\n\nconst { BarCodeType, Type } = ExpoBarCodeScannerModule;\n\nconst EVENT_THROTTLE_MS = 500;\n\ntype BarCodeEvent = {\n  type: string;\n  data: string;\n  [key: string]: any;\n};\n\nexport type BarCodeEventCallbackArguments = {\n  nativeEvent: BarCodeEvent;\n};\n\nexport type BarCodeScannedCallback = (params: BarCodeEvent) => void;\n\nexport { PermissionResponse, PermissionStatus };\n\nexport interface BarCodeScannerProps extends ViewProps {\n  type?: 'front' | 'back' | number;\n  barCodeTypes?: string[];\n  onBarCodeScanned: BarCodeScannedCallback;\n}\n\nexport class BarCodeScanner extends React.Component<BarCodeScannerProps> {\n  lastEvents: { [key: string]: any } = {};\n  lastEventsTimes: { [key: string]: any } = {};\n\n  static Constants = {\n    BarCodeType,\n    Type,\n  };\n\n  static ConversionTables = {\n    type: Type,\n  };\n\n  static propTypes = {\n    ...ViewPropTypes,\n    onBarCodeScanned: PropTypes.func,\n    barCodeTypes: PropTypes.array,\n    type: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  };\n\n  static defaultProps = {\n    type: Type.back,\n    barCodeTypes: Object.values(BarCodeType),\n  };\n\n  static async getPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.getPermissionsAsync();\n  }\n\n  static async requestPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.requestPermissionsAsync();\n  }\n\n  static async scanFromURLAsync(\n    url: string,\n    barCodeTypes: string[] = Object.values(BarCodeType)\n  ): Promise<{ type: string; data: string }> {\n    if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n      throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n    }\n    if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n      throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n    }\n\n    if (Platform.OS === 'ios') {\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n        // Only QR type is supported on iOS, fail if one tries to use other types\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n      }\n      // on iOS use only supported QR type\n      return await ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n    }\n\n    // On other platforms, if barCodeTypes is not provided, use all available types\n    return await ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n  }\n\n  render() {\n    const nativeProps = this.convertNativeProps(this.props);\n    const { onBarCodeScanned } = this.props;\n    return (\n      <ExpoBarCodeScannerView\n        {...nativeProps}\n        onBarCodeScanned={this.onObjectDetected(onBarCodeScanned)}\n      />\n    );\n  }\n\n  // coordinates of cornerPoints and boundingBox are represented in DP (Display-Indepent Points) unit\n  // React Native is using the same unit\n  onObjectDetected = (callback?: BarCodeScannedCallback) => ({\n    nativeEvent,\n  }: BarCodeEventCallbackArguments) => {\n    const { type } = nativeEvent;\n    if (\n      this.lastEvents[type] &&\n      this.lastEventsTimes[type] &&\n      JSON.stringify(nativeEvent) === this.lastEvents[type] &&\n      Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS\n    ) {\n      return;\n    }\n\n    if (callback) {\n      callback(nativeEvent);\n      this.lastEventsTimes[type] = new Date();\n      this.lastEvents[type] = JSON.stringify(nativeEvent);\n    }\n  };\n\n  convertNativeProps(props: BarCodeScannerProps) {\n    const newProps = mapValues(props, this.convertProp);\n    return newProps;\n  }\n\n  convertProp(value: any, key: string): any {\n    if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n      return BarCodeScanner.ConversionTables[key][value];\n    }\n    return value;\n  }\n}\n\nexport const { Constants, getPermissionsAsync, requestPermissionsAsync } = BarCodeScanner;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}